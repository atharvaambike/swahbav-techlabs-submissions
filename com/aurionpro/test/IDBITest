package com.aurionpro.test;

import java.util.*;

import com.aurionpro.model.AccountType;
import com.aurionpro.model.IDBI;

public class IDBITest {

	private static final int MIN_BALANCE = 500;
	private static Map<String, IDBI> accounts = new HashMap<>();
	private static Scanner scanner = new Scanner(System.in);
	private static IDBI currentAccount = null;

	public static void main(String[] args) {

		generateInitialAccounts();

		while (true) {
			System.out.println("\n---------- Welcome to IDBI Bank ----------");
			System.out.println("Enter respective number to select option:");
			System.out.println("1. Create Account");
			System.out.println("2. Select Account");
			System.out.println("3. View Balance");
			System.out.println("4. Deposit");
			System.out.println("5. Withdraw");
			System.out.println("6. Exit");
			System.out.print("Enter here: ");

			int option = scanner.nextInt();
			scanner.nextLine();

			switch (option) {
			case 1:
				createAccount();
				break;
			case 2:
				selectAccount();
				break;
			case 3:
				if (isAccountSelected())
					currentAccount.viewBalance();
				break;
			case 4:
				if (isAccountSelected())
					deposit();
				break;
			case 5:
				if (isAccountSelected())
					withdraw();
				break;
			case 6:
				System.out.println("Thank you for using our services. See you soon!");
				return;
			default:
				System.out.println("Please enter a valid option...");
			}
		}
	}

	private static void generateInitialAccounts() {
		for (int i = 1; i <= 5; i++) {
			String accountNumber = "IDBI" + (100000 + i);
			String name = "Customer no. " + i;
			AccountType accountType = (i % 2 == 0) ? AccountType.Current : AccountType.Savings;
			int initialDeposit = 1234 * i;

			IDBI newAccount = new IDBI(name, initialDeposit, accountType, accountNumber);
			accounts.put(accountNumber, newAccount);
		}

		System.out.println("Initial 5 Accounts: \n");
		for (IDBI account : accounts.values()) {
			System.out.println(account);
			System.out.println();
		}
	}

	private static boolean isAccountSelected() {
		if (currentAccount == null) {
			System.out.println("No account selected. Please select or create an account first.");
			return false;
		}
		return true;
	}

	private static void createAccount() {
		System.out.print("\nEnter your name: ");
		String name = scanner.nextLine();

		AccountType accountType;
		while (true) {
			System.out.print("Choose account type (1 - Saving, 2 - Current): ");
			int type = scanner.nextInt();
			scanner.nextLine();
			if (type == 1) {
				accountType = AccountType.Savings;
				break;
			} else if (type == 2) {
				accountType = AccountType.Current;
				break;
			} else {
				System.out.println("Invalid choice. Please enter 1 or 2.");
			}
		}

		System.out.print("Enter initial deposit (Minimum ₹500): ");
		int initialDeposit = scanner.nextInt();
		scanner.nextLine();

		try {
			if (initialDeposit < MIN_BALANCE) {
				throw new MinimumBalanceException("Initial deposit must be at least ₹500.");
			}
			String accountNumber = generateUniqueAccountNumber();
			IDBI newAccount = new IDBI(name, initialDeposit, accountType, accountNumber);
			accounts.put(accountNumber, newAccount);

			System.out.println("\n**Account created successfully**\n");
			System.out.println(newAccount);
		} catch (MinimumBalanceException e) {
			System.out.println("Error: " + e.getMessage());
		}
	}

	private static void selectAccount() {
		if (accounts.isEmpty()) {
			System.out.println("No accounts available. Please create an account first.");
			return;
		}

		System.out.println("Existing Accounts:");
		for (String accNum : accounts.keySet()) {
			System.out.println("- " + accNum + " | " + accounts.get(accNum).getName());
		}

		System.out.print("Enter the account number to select: ");
		String accNumber = scanner.nextLine();

		if (accounts.containsKey(accNumber)) {
			currentAccount = accounts.get(accNumber);
			System.out.println("Account selected: " + currentAccount.getName());
		} else {
			System.out.println("Invalid account number.");
		}
	}

	private static void deposit() {
		System.out.print("Enter amount to deposit: ");
		int amount = scanner.nextInt();
		scanner.nextLine();

		try {
			if (amount <= 0) {
				throw new InvalidDepositAmountException("Deposit amount must be greater than 0.");
			}
			currentAccount.deposit(amount);
			System.out.println("Deposit successful.");
			currentAccount.viewBalance();
		} catch (InvalidDepositAmountException e) {
			System.out.println("Error: " + e.getMessage());
		}
	}

	private static void withdraw() {
		System.out.print("Enter amount to withdraw: ");
		int amount = scanner.nextInt();
		scanner.nextLine();

		try {
			if (amount <= 0) {
				throw new InvalidWithdrawAmountException("Withdrawal amount must be greater than 0.");
			}

			boolean success = currentAccount.withdraw(amount);
			if (!success) {
				throw new InsufficientBalanceException("Insufficient balance to perform the transaction.");
			}

			System.out.println("Withdrawal successful.");
			currentAccount.viewBalance();
		} catch (InvalidWithdrawAmountException | InsufficientBalanceException e) {
			System.out.println("Error: " + e.getMessage());
		}
	}

	private static String generateUniqueAccountNumber() {
		Random random = new Random();
		String accountNumber;
		do {
			accountNumber = "IDBI100000" + (random.nextInt(900000));
		} while (accounts.containsKey(accountNumber));
		return accountNumber;
	}
}


@SuppressWarnings("serial")
class InsufficientBalanceException extends RuntimeException {
	public InsufficientBalanceException(String message) {
		super(message);
	}
}

@SuppressWarnings("serial")
class InvalidDepositAmountException extends RuntimeException {
	public InvalidDepositAmountException(String message) {
		super(message);
	}
}

@SuppressWarnings("serial")
class InvalidWithdrawAmountException extends RuntimeException {
	public InvalidWithdrawAmountException(String message) {
		super(message);
	}
}

@SuppressWarnings("serial")
class MinimumBalanceException extends RuntimeException {
	public MinimumBalanceException(String message) {
		super(message);
	}
}
